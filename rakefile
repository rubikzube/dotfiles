require 'rake'

def check_directory(directory)
	if not File.directory?(directory)
		Dir::mkdir(directory)
	end
end

home = ENV["HOME"]

task :install_vim do

	vim_dir = "#{home}/.vim"
	autoload_dir = "#{home}/.vim/autoload"
	bundle_dir = "#{home}/.vim/bundle"
	color_dir = "#{home}/.vim/colors"
	current_dir = Dir.pwd

	### Pathogen is the loader for VIM plugins
	puts "Installing Pathogen"
	pathogen_url = 'https://raw.githubusercontent.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim'
	check_directory vim_dir
	check_directory autoload_dir
	check_directory bundle_dir
	`curl -so #{autoload_dir}/pathogen.vim #{pathogen_url}`

	### Install VIM plugins
	bundle_list = [

		# Features
		'git://github.com/Lokaltog/powerline.git', # Useful statusline
		'git://github.com/airblade/vim-gitgutter.git', # Git gutter
		'git://github.com/edsono/vim-matchit.git', # Clause jumping
		'git://github.com/epmatsw/ag.vim', # Ag in vim
		'git://github.com/Shougo/neocomplete.vim', # Tab based autocomplete
		'git://github.com/kien/ctrlp.vim.git', # Finding files
		'git://github.com/majutsushi/tagbar', # Outline view
		'git://github.com/mileszs/ack.vim', # ACK in vim
		'git://github.com/scrooloose/nerdtree.git', # File folder
		'git://github.com/tpope/vim-commentary.git', # Comments
		'git://github.com/tpope/vim-endwise.git', # Conditional autocomplete
		'git://github.com/tpope/vim-fugitive.git', # Better git blame
		'git://github.com/tpope/vim-repeat.git', # Improved Repeater
		'git://github.com/MattesGroeger/vim-bookmarks.git', # Bookmarks
		'git://github.com/Shougo/vimproc.vim.git', # Asynchronous execution library
		'https://github.com/Quramy/tsuquyomi.git', # Typescript tooling

		# Text manipulation
		'git://github.com/Chiel92/vim-autoformat', # Autoformat
		'git://github.com/editorconfig/editorconfig', # Whitespace configuration
		'git://github.com/mattn/emmet-vim.git', # HTML/CSS Expander
		'git://github.com/tpope/vim-abolish.git', # Word manipulation
		'git://github.com/tpope/vim-surround.git', # Word delimiter manipulation
		'git://github.com/vim-ruby/vim-ruby.git', # Ruby helpers

		# Syntax helpers
		'git://github.com/mtscout6/syntastic-local-eslint.vim.git', # local eslint
		'git://github.com/derekwyatt/vim-scala', # Scala
		'git://github.com/digitaltoad/vim-jade.git', # Jade
		'git://github.com/elzr/vim-json.git', # JSON
		'git://github.com/mxw/vim-jsx.git', #JSX
		'git://github.com/groenewege/vim-less.git', # LESS
		'git://github.com/juvenn/mustache.vim.git', # Mustache
		'git://github.com/kchmck/vim-coffee-script.git', # Coffeescript
		'git://github.com/leafgarland/typescript-vim', #Typescript
		'git://github.com/Quramy/vim-js-pretty-template.git', # JavaSrcipt Template Strings
		'git://github.com/lunaru/vim-twig.git', # Twig
		'git://github.com/rodjek/vim-puppet.git', # Puppet
		'git://github.com/scrooloose/syntastic.git', # Syntax checking
		'git://github.com/tpope/vim-markdown.git' # Markdown
	]

	bundle_list.each { |bundle|
		bundle_name = bundle.split('/').last.sub(/\.git$/, '')
		bundle_path = "#{bundle_dir}/#{bundle_name}"
		if not File.directory?("#{bundle_path}")
			puts "Installing #{bundle_name}"
			Dir::mkdir("#{bundle_path}")
			`git clone #{bundle} #{bundle_path}`
		else
			puts "Updating #{bundle_name}"
			Dir.chdir(bundle_path)
			`git pull -v`
			Dir.chdir(current_dir)
		end
	}

	### Install VIM themes
	color_list = [
		'git://github.com/vim-scripts/molokai.git',
		'git://github.com/altercation/vim-colors-solarized.git',
		'git://github.com/tpope/vim-vividchalk.git',
		'git://github.com/larssmit/vim-getafe.git'
	]

	check_directory color_dir
	color_list.each { |color|
		color_name = color.split('/').last.sub(/\.git$/, '')
		color_path = "#{color_dir}/#{color_name}"
		if not File.directory?("#{color_path}")
			check_directory "#{color_path}"
			puts "Installing color #{color_name} (y)?"
			`git clone #{color} #{color_path}`
		else
			puts "Updating #{color_name}"
			Dir.chdir(color_path)
			`git pull -v`
			Dir.chdir(current_dir)
		end
		`mv #{color_path}/colors/* #{color_dir}/`
	}
end

task :install_symlinks do

	linkables = Dir.glob('*/**{.symlink}')
	skip_all = false
	overwrite_all = false
	backup_all = false

	### Sym link in all configuration files, which have the symlink sufflix
	linkables.each { |linkable|
		overwrite = false
		backup = false
		file = linkable.split('/').last.split('.symlink').last
		target = "#{home}/.#{file}"
		if File.exists?(target) || File.symlink?(target)
			unless skip_all || overwrite_all || backup_all
				puts "File already exists: #{target}, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all"
				case STDIN.gets.chomp
					when 'o' then overwrite = true
					when 'b' then backup = true
					when 'O' then overwrite_all = true
					when 'B' then backup_all = true
					when 'S' then skip_all = true
				end
			end
			FileUtils.rm_rf(target) if overwrite || overwrite_all
			`mv "$HOME/.#{file}" "$HOME/.#{file}.backup"` if backup || backup_all
		end
		`ln -s "$PWD/#{linkable}" "#{target}"`
	}
end

task :default => [:install_vim, :install_symlinks]
